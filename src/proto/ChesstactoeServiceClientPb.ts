/**
 * @fileoverview gRPC-Web generated client stub for chesstactoe
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.0
// 	protoc              v3.21.6
// source: proto/chesstactoe.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_chesstactoe_pb from '../proto/chesstactoe_pb';


export class GameClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorMovePiece = new grpcWeb.MethodDescriptor(
    '/chesstactoe.Game/MovePiece',
    grpcWeb.MethodType.UNARY,
    proto_chesstactoe_pb.MovePieceRequest,
    proto_chesstactoe_pb.MovePieceResponse,
    (request: proto_chesstactoe_pb.MovePieceRequest) => {
      return request.serializeBinary();
    },
    proto_chesstactoe_pb.MovePieceResponse.deserializeBinary
  );

  movePiece(
    request: proto_chesstactoe_pb.MovePieceRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_chesstactoe_pb.MovePieceResponse>;

  movePiece(
    request: proto_chesstactoe_pb.MovePieceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chesstactoe_pb.MovePieceResponse) => void): grpcWeb.ClientReadableStream<proto_chesstactoe_pb.MovePieceResponse>;

  movePiece(
    request: proto_chesstactoe_pb.MovePieceRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chesstactoe_pb.MovePieceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chesstactoe.Game/MovePiece',
        request,
        metadata || {},
        this.methodDescriptorMovePiece,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chesstactoe.Game/MovePiece',
    request,
    metadata || {},
    this.methodDescriptorMovePiece);
  }

  methodDescriptorJoin = new grpcWeb.MethodDescriptor(
    '/chesstactoe.Game/Join',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_chesstactoe_pb.JoinRequest,
    proto_chesstactoe_pb.JoinResponse,
    (request: proto_chesstactoe_pb.JoinRequest) => {
      return request.serializeBinary();
    },
    proto_chesstactoe_pb.JoinResponse.deserializeBinary
  );

  join(
    request: proto_chesstactoe_pb.JoinRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_chesstactoe_pb.JoinResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chesstactoe.Game/Join',
      request,
      metadata || {},
      this.methodDescriptorJoin);
  }

  methodDescriptorSubscribeBoard = new grpcWeb.MethodDescriptor(
    '/chesstactoe.Game/SubscribeBoard',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_chesstactoe_pb.SubscribeBoardRequest,
    proto_chesstactoe_pb.SubscribeBoardResponse,
    (request: proto_chesstactoe_pb.SubscribeBoardRequest) => {
      return request.serializeBinary();
    },
    proto_chesstactoe_pb.SubscribeBoardResponse.deserializeBinary
  );

  subscribeBoard(
    request: proto_chesstactoe_pb.SubscribeBoardRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_chesstactoe_pb.SubscribeBoardResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chesstactoe.Game/SubscribeBoard',
      request,
      metadata || {},
      this.methodDescriptorSubscribeBoard);
  }

  methodDescriptorTakeBack = new grpcWeb.MethodDescriptor(
    '/chesstactoe.Game/TakeBack',
    grpcWeb.MethodType.UNARY,
    proto_chesstactoe_pb.TakeBackRequest,
    proto_chesstactoe_pb.TakeBackResponse,
    (request: proto_chesstactoe_pb.TakeBackRequest) => {
      return request.serializeBinary();
    },
    proto_chesstactoe_pb.TakeBackResponse.deserializeBinary
  );

  takeBack(
    request: proto_chesstactoe_pb.TakeBackRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_chesstactoe_pb.TakeBackResponse>;

  takeBack(
    request: proto_chesstactoe_pb.TakeBackRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_chesstactoe_pb.TakeBackResponse) => void): grpcWeb.ClientReadableStream<proto_chesstactoe_pb.TakeBackResponse>;

  takeBack(
    request: proto_chesstactoe_pb.TakeBackRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_chesstactoe_pb.TakeBackResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chesstactoe.Game/TakeBack',
        request,
        metadata || {},
        this.methodDescriptorTakeBack,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chesstactoe.Game/TakeBack',
    request,
    metadata || {},
    this.methodDescriptorTakeBack);
  }

}

